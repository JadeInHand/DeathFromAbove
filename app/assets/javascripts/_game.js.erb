BasicGame.Game = function ( game ) {

};

BasicGame.Game.prototype = {

  create: function () {

    this.cursors = this.input.keyboard.createCursorKeys();

    this.setupBackground();
    this.setupPlayer();
    this.setupEnemies();
    this.setupBullets();
    this.setupExplosions();
    this.setupPlayerIcons();
    this.setupText();
    this.setupAudio();

  },

  setupBackground: function () {

    this.sea = this.add.tileSprite( 0, 0, this.game.width, this.game.height, 'sea' ); // adding background, 0,0 represents the upmost left corner as position. 800, 600 represents the size, sea represents the image too use, called in the preloader.
    this.sea.autoScroll( 0, 12 );

  },

  changeBackground: function () {

    this.sea.destroy();
    this.concrete = this.add.tileSprite( 0, 0, this.game.width, this.game.height, 'concrete' );
    this.world.sendToBack( this.concrete );
    this.concrete.tilePosition.y += 0.2;
    

  },

  setupAudio: function () {

    this.sound.volume = 0.2;
    this.explosionSFX = this.add.audio( 'explosion' );
    this.playerExplosionSFX = this.add.audio( 'playerExplosion' );
    this.enemyFireSFX = this.add.audio( 'enemyFire' );
    this.playerFireSFX = this.add.audio( 'playerFire' );
    this.powerUpSFX = this.add.audio( 'powerUp' );

  },

  setupPlayer: function () {

    this.player = this.add.sprite(this.game.width / 2, this.game.height - 50, 'player');
    this.player.anchor.setTo( 0.5, 0.5 );
    this.player.animations.add( 'fly', [ 0, 1, 2 ], 20, true );
    this.player.animations.add( 'ghost', [ 3, 0, 3, 1 ], 20, true );
    this.player.play( 'fly' );
    this.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.player.speed = 300;
    this.player.body.collideWorldBounds = true;
    this.player.body.setSize( 20, 20, 0, -5 );
    this.weaponLevel = 0;

  },

  setupEnemies: function () {
    // ENEMY VARIABLES
    var enemyReward = 100;
    var shooterReward = 400;
    var bossReward = 10000;
    var enemyDropRate = 0.3;
    var shooterDropRate = 0.5;
    var bossDropRate = 0.9;
    // GREEN ENEMY
    this.enemyPool = this.add.group();
    this.enemyPool.enableBody = true;
    this.enemyPool.physicsBodyType = Phaser.Physics.ARCADE;
    this.enemyPool.createMultiple( 50, 'greenEnemy' );
    this.enemyDelay = 1000;
    this.enemyPool.setAll( 'anchor.x', 0.5 );
    this.enemyPool.setAll( 'anchor.y', 0.5 );
    this.enemyPool.setAll( 'outOfBoundsKill', true );
    this.enemyPool.setAll( 'checkWorldBounds', true );
    this.enemyPool.setAll( 'reward', enemyReward, false, false, 0, true );
    this.enemyPool.setAll( 'dropRate', enemyDropRate, false, false, 0, true );
    this.enemyPool.forEach( function ( enemy ) {
      // enemy.animations.add( 'fly', [ 0, 1, 2 ], 20, true );
      // enemy.animations.add( 'hit', [ 3, 1, 3, 2 ], 20, false );
      enemy.animations.add( 'fly', [ 0 ], 20, true );
      enemy.animations.add( 'hit', [ 1, 0, 1, 0 ], 20, false );
      enemy.events.onAnimationComplete.add( function ( e ) {
        e.play( 'fly' );
      }, this );
    });
    this.nextEnemyAt = 0;

    // WHITE SHOOTING ENEMY
    this.shooterPool = this.add.group();
    this.shooterPool.enableBody = true;
    this.shooterPool.physicsBodyType = Phaser.Physics.ARCADE;
    this.shooterPool.createMultiple( 20, 'whiteEnemy' );
    this.shooterPool.setAll( 'anchor.x', 0.5 );
    this.shooterPool.setAll( 'anchor.y', 0.5 );
    this.shooterPool.setAll( 'outOfBoundsKill', true );
    this.shooterPool.setAll( 'checkWorldBounds', true );
    this.shooterPool.setAll( 'reward', shooterReward, false, false, 0, true );
    this.shooterPool.setAll( 'dropRate', shooterDropRate, false, false, 0, true );
    this.shooterPool.forEach( function ( enemy ) {
      // enemy.animations.add( 'fly', [ 0, 1, 2 ], 20, true );
      // enemy.animations.add( 'hit', [ 3, 1, 3, 2 ], 20, false );
      enemy.animations.add( 'fly', [ 0 ], 20, true );
      enemy.animations.add( 'hit', [ 1, 0, 1, 0 ], 20, false );
      enemy.events.onAnimationComplete.add( function ( e ) {
        e.play( 'fly' );
      }, this );
    });

    this.nextShooterAt = this.time.now + ( Phaser.Timer.SECOND * 5 );
    this.shooterDelay = Phaser.Timer.SECOND * 3;

    // BOSS ENEMY
    this.bossPool = this.add.group();
    this.bossPool.enableBody = true;
    this.bossPool.physicsBodyType = Phaser.Physics.ARCADE;
    this.bossPool.createMultiple( 1, 'boss' );
    this.bossPool.setAll( 'anchor.x', 0.5 );
    this.bossPool.setAll( 'anchor.y', 0.5 );
    this.bossPool.setAll( 'outOfBoundsKill', true );
    this.bossPool.setAll( 'checkWorldBounds', true );
    this.bossPool.setAll( 'reward', bossReward, false, false, 0, true );
    this.bossPool.setAll( 'dropRate', bossDropRate, false, false, 0, true );
    this.bossPool.forEach( function ( enemy ) {
      // enemy.animations.add( 'fly', [ 0, 1, 2 ], 20, true );
      // enemy.animations.add( 'hit', [ 3, 1, 3, 2 ], 20, false );
      enemy.animations.add( 'fly', [ 0 ], 20, true );
      enemy.animations.add( 'hit', [ 2, 1, 2, 1 ], 20, false );
      enemy.events.onAnimationComplete.add( function ( e ) {
        e.play( 'fly' );
      }, this );
    });
    this.boss = this.bossPool.getTop();
    this.bossTime = false;

  },

  setupBullets: function () {

    // ENEMY SHOOTER BULLETS
    this.enemyBulletPool = this.add.group();
    this.enemyBulletPool.enableBody = true;
    this.enemyBulletPool.physicsBodyType = Phaser.Physics.ARCADE;
    this.enemyBulletPool.createMultiple( 100, 'enemyBullet' );
    this.enemyBulletPool.setAll( 'anchor.x', 0.5 );
    this.enemyBulletPool.setAll( 'anchor.y', 0.5 );
    this.enemyBulletPool.setAll( 'outOfBoundsKill', true );
    this.enemyBulletPool.setAll( 'checkWorldBounds', true );
    this.enemyBulletPool.setAll( 'reward', 0, false, false, 0, true );

    // PLAYER BULLETS
    this.bulletPool = this.add.group(); // from this line downward for bulletPool group is done to reduce memory leakage
    this.bulletPool.enableBody = true;
    this.bulletPool.physicsBodyType = Phaser.Physics.ARCADE;
    this.bulletPool.createMultiple( 75, 'bullet' );
    this.bulletPool.setAll( 'anchor.x', 0.5 );
    this.bulletPool.setAll( 'anchor.y', 0.5 );
    this.bulletPool.setAll( 'outOfBoundsKill', true );
    this.bulletPool.setAll( 'checkWorldBounds', true );
    this.nextShotAt = 0;
    this.shotDelay = 175;

    this.bombPool = this.add.group();
    this.bombPool.enableBody = true;
    this.bombPool.physicsBodyType = Phaser.Physics.ARCADE;
    this.bombPool.createMultiple( 2, 'bomb-blast');
    this.bombPool.setAll( 'anchor.x', 0.5 );
    this.bombPool.setAll( 'anchor.y', 0.5 );
    this.bombPool.setAll( 'outOfBoundsKill', true );
    this.bombPool.setAll( 'checkWorldBounds', true );
    this.nextBombAt = 0;
    this.bombDelay = 400;

  },

  setupExplosions: function () {

    this.explosionPool = this.add.group();
    this.explosionPool.enableBody = true;
    this.explosionPool.physicsBodyType = Phaser.Physics.ARCADE;
    this.explosionPool.createMultiple( 100, 'explosion' );
    this.explosionPool.setAll( 'anchor.x', 0.5 );
    this.explosionPool.setAll( 'anchor.y', 0.5 );
    this.explosionPool.forEach( function ( explosion ) {
      explosion.animations.add( 'boom' );
    });

  },

  setupPlayerIcons: function () {
    // POWER UP, GENERATED UPON ENEMY DESTRUCTION IN ACCORDANCE WITH DROP RATE PROVIDED IN setupEnemies();
    var powerUpReward = 100;
    this.powerUpPool = this.add.group();
    this.powerUpPool.enableBody = true;
    this.powerUpPool.physicsBodyType = Phaser.Physics.ARCADE;
    this.powerUpPool.createMultiple( 5, 'powerup1' );
    this.powerUpPool.setAll( 'anchor.x', 0.5 );
    this.powerUpPool.setAll( 'anchor.y', 0.5 );
    this.powerUpPool.setAll( 'outOfBoundsKill', true );
    this.powerUpPool.setAll( 'checkWorldBounds', true );
    this.powerUpPool.setAll( 'reward', powerUpReward, false, false, 0, true );
    // PLAYER HEALTH DISPLAYED IN TOP RIGHT OF GAME SCREEN
    var playerLives = 3;
    this.lives = this.add.group();
    var firstLifeIconX = this.game.width - 10 - ( playerLives * 30);
    for ( var i = 0; i < playerLives; i++ ) {
      var life = this.lives.create( firstLifeIconX + ( 30 * i ), 30, 'player' );
      life.scale.setTo( 0.5, 0.5 );
      life.anchor.setTo( 0.5, 0.5 );
    };
    // var bombs = 3;
    // this.bombsUse = this.add.group();
    // var firstBombIconX = this.game.width - 680 - ( bombs * 30 );
    // for ( var i = 0; i < bombs; i++ ) {
    //   var bomb = this.bombsUse.create( firstBombIconX + ( 30 * i ), 30, 'bomb' );
    //   bomb.anchor.setTo( 0.5, 0.5 );
    // };

  },

  setupText: function () {

    this.instructions = this.add.text( this.game.width / 2, this.game.height - 100, 'Use Arrow Keys to Move, Press Z to Fire\n ' + ' Tapping/clicking does both',
                        {
                          font: '20px monospace',
                          fill: '#fff',
                          align:'center'
                        });
    this.instructions.anchor.setTo( 0.5, 0.5 );
    this.instExpire = this.time.now + 10000;

    this.score = 0;
    this.scoreText = this.add.text( this.game.width / 2, 30, '' + this.score,
                      {
                        font: '20px monospace',
                        fill: '#fff',
                        align: 'center'
                      });
    this.scoreText.anchor.setTo( 0.5, 0.5 );

  },

  checkCollisions: function () {

    // Check player bullet hitting green enemy
    this.physics.arcade.overlap( this.bulletPool, this.enemyPool, this.enemyHit, null, this );
    // Check player bullet hitting white enemy
    this.physics.arcade.overlap( this.bulletPool, this.shooterPool, this.enemyHit, null, this );
    // Check player crashing into green enemy
    this.physics.arcade.overlap( this.player, this.enemyPool, this.playerHit, null, this );
    // Check player crashing into white enemy
    this.physics.arcade.overlap( this.player, this.shooterPool, this.playerHit, null, this );
    // Check white enemy bullets hitting player
    this.physics.arcade.overlap( this.player, this.enemyBulletPool, this.playerHit, null, this );
    // Check player collision with powerup
    this.physics.arcade.overlap( this.player, this.powerUpPool, this.playerPowerUp, null, this );
    if ( this.bossTime === false ) {
      // Check player bullet collision with boss
      this.physics.arcade.overlap( this.bulletPool, this.bossPool, this.enemyHit, null, this );
      // Check collision between boss and player
      this.physics.arcade.overlap( this.player, this.bossPool, this.playerHit, null, this );
    };
    // Check bomb collision with enemies
    this.physics.arcade.overlap( this.bombPool, this.enemyPool, this.enemyHit, null, this );
    this.physics.arcade.overlap( this.bombPool, this.shooterPool, this.enemyHit, null, this );
    this.physics.arcade.overlap( this.bombPool, this.bossPool, this.enemyHit, null, this );
    
  },

  spawnEnemies: function () {

    // GREEN ENEMY
    var enemyHealth = 2;
    if ( this.nextEnemyAt < this.time.now && this.enemyPool.countDead() > 0 ) {
      this.nextEnemyAt = this.time.now + this.enemyDelay;
      var enemy = this.enemyPool.getFirstExists( false );
      enemy.reset( this.rnd.integerInRange( 20, this.game.width - 20 ), 0, enemyHealth );
      enemy.body.velocity.y = this.rnd.integerInRange( 30, 60 );
      enemy.play( 'fly' );
    };

    // WHITE SHOOTING ENEMY
    var shooterHealth = 5;
    if ( this.nextShooterAt < this.time.now && this.shooterPool.countDead() > 0 ) {
      this.nextShooterAt = this.time.now + this.shooterDelay;
      var shooter = this.shooterPool.getFirstExists( false );
      shooter.reset( this.rnd.integerInRange( 20, this.game.width - 20 ), 0, shooterHealth );
      var target = this.rnd.integerInRange( 20, this.game.width - 20 );
      var shooterMinVelocity = 30;
      var shooterMaxVelocity = 80;
      shooter.rotation = this.physics.arcade.moveToXY( shooter, target, this.game.height, this.rnd.integerInRange( shooterMinVelocity, shooterMaxVelocity ) ) - Math.PI / 2; // this part of the code sets a random distination at the end of the board for the white enemy to attack and shoot.
      shooter.play( 'fly' );
      shooter.nextShotAt = 0;
    };

  },

  spawnBoss: function () {

    var bossHealth = 300;
    var bossYVelocity = 15;
    this.bossTime = true;
    this.boss.reset( this.game.width / 2, 0, bossHealth );
    this.physics.enable( this.boss, Phaser.Physics.ARCADE );
    this.boss.body.velocity.y = bossYVelocity;
    this.boss.play( 'fly' );

  },

  spawnPowerUp: function ( enemy ) {

    var powerUpVelocity = 100;
    if ( this.powerUpPool.countDead() === 0 || this.weaponLevel === 2 ) {
      return;
    };

    if ( this.rnd.frac() < enemy.dropRate ) {
      var powerUp = this.powerUpPool.getFirstExists( false );
      powerUp.reset( enemy.x, enemy.y );
      powerUp.body.velocity.y = powerUpVelocity;
    };

  },

  processPlayerInput: function () {

    this.player.body.velocity.x = 0;
    this.player.body.velocity.y = 0;

    if ( this.cursors.left.isDown ) {
      this.player.body.velocity.x = -this.player.speed;
    } else if ( this.cursors.right.isDown ) {
      this.player.body.velocity.x = this.player.speed;
    };

    if ( this.cursors.up.isDown ) {
      this.player.body.velocity.y = -this.player.speed;
    } else if ( this.cursors.down.isDown ) {
      this.player.body.velocity.y = this.player.speed;
    };

    if ( this.input.activePointer.isDown && this.physics.arcade.distanceToPointer( this.player ) > 15 ) {
      this.physics.arcade.moveToPointer( this.player, this.player.speed );
    };

    if ( this.input.keyboard.isDown(Phaser.Keyboard.Z) || this.input.activePointer.isDown ) {
      this.fire();
    };

    if ( this.input.keyboard.isDown(Phaser.Keyboard.P)) {
      this.bombBlast();
    };

    if ( this.input.keyboard.isDown(Phaser.Keyboard.X) ) {
      if ( this.returnText && this.returnText.exists ) {
        this.quitGame();
      };
    };

  },

  processDelayedEffects: function () {

    // INSTRUCTION DELAY CODE
    if ( this.instructions.exists && this.time.now > this.instExpire ) {
      this.instructions.destroy();
    };
    // PLAYER HEALTH LOSS GHOST DELAY CODE
    if ( this.ghostUntil && this.ghostUntil < this.time.now ) {
      this.ghostUntil = null;
      this.player.play( 'fly' );
    };
    // WIN RETURN TEXT DELAY CODE
    if ( this.showReturn && this.time.now - this.showReturn ) {
      this.returnText = this.add.text( this.game.width / 2, this.game.height / 2 + 35, "Press X to return to Main Menu.",
                        {
                          font: '16px sans-serif',
                          fill: '#fff'  
                        });
      this.returnText.anchor.setTo( 0.5, 0.5 );
      this.showReturn = false; 
    };
    // BOSS DELAY CODE
    var bossXVelocity = 200;
    if ( this.bossTime && this.boss.y > 80 ){
      this.bossTime = false;
      this.boss.nextShotAt = 0;
      this.boss.body.velocity.y = 0;
      this.boss.body.velocity.x = bossXVelocity;
      this.boss.body.bounce.x = 1;
      this.boss.body.collideWorldBounds = true;

    };

  },


  update: function () {

    if ( this.concrete && this.concrete.exists ) {
      this.concrete.tilePosition.y += 0.2;
    };

    this.checkCollisions();
    this.spawnEnemies();
    this.enemyFire();
    this.processPlayerInput();
    this.processDelayedEffects();

  },

  fire: function () {

    if ( !this.player.alive || this.nextShotAt > this.time.now ) {
      return;
    }


    this.nextShotAt = this.time.now + this.shotDelay;
    this.playerFireSFX.play();

    var bulletVelocity = 500;
    var bullet;
    if ( this.weaponLevel === 0 ) {

      if ( this.bulletPool.countDead() === 0 ) {
        return;
      }
      bullet = this.bulletPool.getFirstExists( false );
      bullet.reset( this.player.x, this.player.y - 20 );
      bullet.body.velocity.y = -bulletVelocity;
    } else {
      if ( this.bulletPool.countDead() < this.weaponLevel ) {
        return;
      }
      for ( var i = 0; i < this.weaponLevel; i++ ) {
        bullet = this.bulletPool.getFirstExists( false );
        bullet.reset( this.player.x - ( 10 + i * 6 ), this.player.y - 10 );
        this.physics.arcade.velocityFromAngle( -90 - i * 7.5, bulletVelocity, bullet.body.velocity );

        bullet = this.bulletPool.getFirstExists( false );
        bullet.reset( this.player.x + ( 10 + i * 6 ), this.player.y - 10 );
        this.physics.arcade.velocityFromAngle( -90 + i * 7.5, bulletVelocity, bullet.body.velocity );
      }
    }


  },

  bombBlast: function () {

    var bomb;
    var bombLength = Phaser.Timer.SECOND * 3;
    bomb = this.bombPool.getFirstExists( false );
    if ( this.bombPool.countDead() >= 1 ) {
      bomb.reset(this.game.width / 2, this.game.height / 2)
    }
    this.bombPool.forEach( function (bomb) {
      bomb.animations.add( 'bomb-blast', [ 0, 0, 0, 0 ], 3000, false );
    });
    var bombs = this.bombPool.getFirstExists( false );
    if ( bombs !== null ) {
      bombs.kill();
    };
    console.log('bomb sent');


  },

  enemyFire: function () {

    var enemyBulletVelocity = 150;
    var enemyBulletDelay = Phaser.Timer.SECOND * 2;
    this.shooterPool.forEachAlive( function ( enemy ) {
      if ( this.time.now > enemy.nextShotAt && this.enemyBulletPool.countDead() > 0 ) {
        var bullet = this.enemyBulletPool.getFirstExists( false );
        bullet.reset( enemy.x, enemy.y );
        this.physics.arcade.moveToObject( bullet, this.player, enemyBulletVelocity );
        enemy.nextShotAt = this.time.now + enemyBulletDelay;
        this.enemyFireSFX.play();
      }
    }, this );
    var bossHealth = 300;
    var enemyBulletVelocity = 150;
    if ( this.bossTime === false && this.boss.alive && this.boss.nextShotAt < this.time.now && this.enemyBulletPool.countDead() >= 10 ) {
      this.boss.nextShotAt = this.time.now + Phaser.Timer.SECOND;
      this.enemyFireSFX.play();

      for ( var i = 0; i < 3; i++) {
        var leftBullet = this.enemyBulletPool.getFirstExists( false );
        leftBullet.reset( this.boss.x - 5 - i * 5, this.boss.y + 20 );
        var rightBullet = this.enemyBulletPool.getFirstExists( false );
        rightBullet.reset( this.boss.x + 5 + i * 5, this.boss.y + 20 );
        this.physics.arcade.moveToObject( leftBullet, this.player, enemyBulletVelocity );
        this.physics.arcade.moveToObject( rightBullet, this.player, enemyBulletVelocity );
      }
    }

  },

  explode: function ( sprite ) {

    if ( this.explosionPool.countDead() === 0 ) {
      return;
    }
    var explosion = this.explosionPool.getFirstExists( false );
    explosion.reset(sprite.x, sprite.y);
    explosion.play( 'boom', 15, false, true );
    explosion.body.velocity.x = sprite.body.velocity.x;
    explosion.body.velocity.y = sprite.body.velocity.y;

  },

  playerHit: function ( player, enemy ) {

    if ( this.ghostUntil && this.ghostUntil > this.time.now ) {
      return;
    };
    this.playerExplosionSFX.play();
    var ghostTime = Phaser.Timer.SECOND * 3;
    var crashDamage = 5;
    this.damageEnemy( enemy, crashDamage );
    var life = this.lives.getFirstAlive();
    if ( life !== null ) {
      life.kill();
      this.weaponLevel = 0;
      this.ghostUntil = this.time.now + ghostTime;
      this.player.play( 'ghost' );
    } else {
      this.explode( player );
      player.kill();
      this.displayEnd( false );
    };

  },

  playerPowerUp: function ( player, powerUp ) {

    this.addToScore( powerUp.reward );
    powerUp.kill();
    this.powerUpSFX.play();
    if ( this.weaponLevel < 2 ) {
      this.weaponLevel++;
    }

  },

  enemyHit: function ( bullet, enemy ) {

    var bulletDamage = 1;
    bullet.kill();
    this.damageEnemy( enemy, bulletDamage );

  },

  bombHit: function ( bomb, enemy ){

    var bombDamage = 3;
    this.damageEnemy( enemy, bombDamage )

  },

  damageEnemy: function ( enemy, damage ) {

    enemy.damage( damage );
    if ( enemy.alive ) {
      enemy.play('hit');
    } else {
      this.explode( enemy );
      this.explosionSFX.play();
      this.addToScore( enemy.reward );
      this.spawnPowerUp( enemy );
      if ( enemy.key === 'boss' ) {
        this.enemyPool.destroy();
        this.shooterPool.destroy();
        this.bossPool.destroy();
        this.enemyBulletPool.destroy();
        this.displayEnd( true );
      }

    }

  },

  addToScore: function ( gameScore ) {

    this.score += gameScore;
    this.scoreText.text = this.score;
    if ( this.score >= 30000 && this.bossPool.countDead() === 1) {
      this.enemyPool.createMultiple( 60, 'greenEnemy' );
      this.enemyDelay = 800;
      this.spawnBoss();
    } else if (this.score >= 15000) {
      this.shooterPool.createMultiple( 35, 'whiteEnemy' );
      this.enemyPool.createMultiple( 60, 'greenEnemy' );
      this.enemyDelay = 800;
    } else if ( this.score >= 8000 ) {
      this.enemyPool.createMultiple( 60, 'greenEnemy' );
      this.enemyDelay = 850;
    } else if ( this.score >= 2000 ) {
      this.enemyPool.createMultiple( 55, 'greenEnemy' );
      this.enemyDelay = 900;
    } else {
      this.enemyPool.createMultiple( 50, 'greenEnemy' );
      this.enemyDelay = 1000;
    };

  },

  displayEnd: function ( winState ) {

    if ( this.endText && this.endText.exists ) {
      return;
    };

    if ( winState === false ) {
      this.msgText = "Game Over! NERD!!";
    } else {
      this.msgText = "You Win! What a Legend.";
    };

    this.endText = this.add.text( this.game.width / 2, this.game.height / 2 - 40, this.msgText,
                  {
                    font: '72px serif',
                    fill: '#fff'
                  });
    this.endText.anchor.setTo( 0.5, 0.5 );
    this.showReturn = this.time.now + (Phaser.Timer.SECOND * 2);
    this.submit = this.add.button( this.game.width / 2, this.game.height / 2 + 150, 'submit' );
    this.submit.anchor.setTo( 0.5, 0.5 );
    this.submit.inputEnabled = true;
    this.submit.onInputDown.add( this.submitScore, this );

  },

  submitScore: function () {

    $.ajax({
      url: "/highscores",
      type: "POST",
      data: {highscore: {
        name: gon.username,
        score: this.score
      }}
    });
    location.reload().delay( 2000 );


  },

  quitGame: function ( pointer ) {

    this.sea.destroy();
    this.player.destroy();
    this.enemyPool.destroy();
    this.bulletPool.destroy();
    this.explosionPool.destroy();
    this.shooterPool.destroy();
    this.enemyBulletPool.destroy();
    this.powerUpPool.destroy();
    this.bossPool.destroy();
    this.instructions.destroy();
    this.scoreText.destroy();
    this.endText.destroy();
    this.returnText.destroy();

    this.state.start( 'MainMenu' );

  }

};
